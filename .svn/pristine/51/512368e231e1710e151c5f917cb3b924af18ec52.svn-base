#include "bitset.h"

#include <stdint.h>

/* Tests if the two given values are equal, returns 1 if true, 0 otherwise. */
unsigned short equals(uint64_t value1, uint64_t value2) {
  return value1 == value2;
}

/* Sets the bit at a specific position of the provided value to 1. */
uint64_t set_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;
    
  return value |= 1ULL << (position - 1);
}

/* Sets the bit at a specific position of the provided value to 0. */
uint64_t clear_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;
    
  return value &= ~(1ULL << (position - 1));
}

/* Toggle the bit at a specific position of the provided value. */
uint64_t toggle_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;
    
  return value ^= 1ULL << (position - 1);
}

/* Returns the value of the bit at a specific position of the provided value. */
unsigned short check_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;
    
  return (value >> (position - 1)) & 1U;
}

/* Returns 1 if the value is a singleton, otherwise 0. */
unsigned short is_singleton(uint64_t value) {
  return value == 0?0:(value & (value - 1)) == 0;
}

/* Returns the bitwise intersection of two values. */
uint64_t bits_and(uint64_t value1, uint64_t value2) {
  return value1 & value2;
}

/* Returns the bitwise union of two values. */
uint64_t bits_or(uint64_t value1, uint64_t value2) {
  return value1 | value2;
}

/* Returns the bitwise exclusive union of two values. */
uint64_t bits_xor(uint64_t value1, uint64_t value2) {
  return value1 ^ value2;
}

/* Returns the bitwise flip of a value. */
uint64_t bits_flip(uint64_t value) {
  return ~value;
}
