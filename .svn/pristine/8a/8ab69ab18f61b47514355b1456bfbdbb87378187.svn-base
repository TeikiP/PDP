#include "inshiNoHeya.h"
#include "composites.h"

#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>



struct cell_t {
        /* Value within the cell. */
        uint64_t value;
        /* Required product for cells in the current room. */
        unsigned long long roomProduct;
        /* Sets of factors that make up this roomProduct. */
        //CompositesSet *compositesSet;
        /* Previous cell in the current room. */
        Cell *previous;
        /* Next cell in the current room. */
        Cell *next;
};

struct grid_t {
        /* Grid that we are working on. */
        Cell **cells;
        /* Size of this grid. */
        size_t size;
};


/* MAIN */
int
main (int argc, char **argv) {
        if (argc < 2) {
                fprintf(stderr, "Usage: %s <file> (ex: %s ../test/5x5_Rapport)\n", argv[0], argv[0]);
                exit(EXIT_FAILURE);
        }

        printf("Program starting!\n");
  
        Grid *grid = readFile(argv[1]);
  
        /* DEBUG */
        /*CompositesSet *tmpSet = findComposites(36);  
        printCompositesSets(tmpSet);*/

        /* DEBUG */
        /* //5x5_Wikipedia values
        grid->cells[0]->value = 3;
        grid->cells[1]->value = 4;
        grid->cells[2]->value = 1;
        grid->cells[3]->value = 5;
        grid->cells[4]->value = 2;

        grid->cells[5]->value = 2;
        grid->cells[6]->value = 1;
        grid->cells[7]->value = 3;
        grid->cells[8]->value = 4;
        grid->cells[9]->value = 5;
        
        grid->cells[10]->value = 5;
        grid->cells[11]->value = 3;
        grid->cells[12]->value = 2;
        grid->cells[13]->value = 1;
        grid->cells[14]->value = 4;
        
        grid->cells[15]->value = 1;
        grid->cells[16]->value = 5;
        grid->cells[17]->value = 4;
        grid->cells[18]->value = 2;
        grid->cells[19]->value = 3;
        
        grid->cells[20]->value = 4;
        grid->cells[21]->value = 2;
        grid->cells[22]->value = 5;
        grid->cells[23]->value = 3;
        grid->cells[24]->value = 1;*/

        fillSingleCells(grid);

        printValuesInGrid(grid);
        
        if (checkGrid(grid) == 1)
                printf("Valid\n");
        else
                printf("Invalid grid\n");

        printGrid(grid);

        freeGrid(grid);

        printf("Program ending!\n");

        return 0;
}

void
fillSingleCells (Grid *grid) {
        for (unsigned int y=0; y<grid->size; y++) {
                for (unsigned int x=0; x<grid->size; x++) {
                        if (grid->cells[y*grid->size+x]->previous == NULL && grid->cells[y*grid->size+x]->next == NULL)
                                grid->cells[y*grid->size+x]->value = grid->cells[y*grid->size+x]->roomProduct;
                }
        }
}

/* Checks if a grid is valid. Returns 1 if everything is valid, 0 otherwise. */
int
checkGrid (Grid *grid) {
        for (unsigned int y=0; y<grid->size; y++)
                for (unsigned int x=0; x<grid->size; x++)
                        if (checkCell(grid, x, y) == 0)
                                return 0;
                                
        return 1;
}

/* Checks if a single cell is valid. Returns 1 if cell is valid, 0 otherwise. */
int
checkCell (Grid *grid, unsigned int x, unsigned int y) {
        int isValid = 1;

        if (checkRow(grid, x, y) == 0)
                isValid = 0;
                
        else if (checkCol(grid, x, y) == 0)
                isValid = 0;
                
        else if (checkRoom(grid, x, y) == 0)
                isValid = 0;
                
        return isValid;
}

/* Checks if the row of a given cell has no duplicate numbers. Returns 1 if row is valid, 0 otherwise. */
int
checkRow (Grid *grid, unsigned int x, unsigned int y) {
        int isValid = 1;
        
        uint64_t cellValue = grid->cells[y*grid->size+x]->value;        
        
        for (unsigned int i=0; i<grid->size; i++) {
                if (i == x)
                        continue;
                        
                else if (cellValue == grid->cells[y*grid->size+i]->value) {
                        isValid = 0;
                        break;
                }
        }
        
        return isValid;      
}

/* Checks if the column of a given cell has no duplicate numbers. Returns 1 if column is valid, 0 otherwise. */
int
checkCol (Grid *grid, unsigned int x, unsigned int y) {
        int isValid = 1;
        
        uint64_t cellValue = grid->cells[y*grid->size+x]->value;        
        
        for (unsigned int i=0; i<grid->size; i++) {
                if (i == y)
                        continue;
                        
                else if (cellValue == grid->cells[i*grid->size+x]->value) {
                        isValid = 0;
                        break;
                }
        }
        
        return isValid;      
}

/* Checks if the room of a given cell makes the expected product. Returns 1 if room is valid, 0 otherwise. */
int
checkRoom (Grid *grid, unsigned int x, unsigned int y) {
        int isValid = 1;
        
        Cell *iterator = grid->cells[y*grid->size+x];
        unsigned long long currentProduct = 1;
        unsigned long long expectedProduct = iterator->roomProduct;  
                
        while (iterator->previous != NULL)
                iterator = iterator->previous;
              
        while (iterator->next != NULL) {
                currentProduct *= iterator->value;
                iterator = iterator->next;
        }
        
        currentProduct *= iterator->value;
        
        if (currentProduct != expectedProduct)
                isValid = 0;
                
        return isValid;      
}


/* Affiche la grille dans un fichier de sortie. */
void
printGrid (Grid *grid) {
        FILE* outputFile = fopen ("out.txt", "w");

        int size = grid->size;

        for (int k = 0 ; k < size ; k++) {
                fprintf (outputFile, "  ___ ");  
        }

        for (int i = 0 ; i < size ; i++) {
                fprintf (outputFile, "\n| ");

                for (int j = 0 ; j < size ; j++) {
                        if (grid->cells[i*size+j]->value < 10)
                                fprintf (outputFile, " %" PRIu64 " ", grid->cells[i*size+j]->value);
                        else if (grid->cells[i*size+j]->value < 100)
                                fprintf (outputFile, "%" PRIu64 " ", grid->cells[i*size+j]->value);
                        else
                                fprintf (outputFile, "%" PRIu64, grid->cells[i*size+j]->value);

                        if (j == size - 1)
                                fprintf (outputFile, " |\n| ");
                        else if (grid->cells[i*size+j]->next == grid->cells[i*size+j+1])
                                fprintf (outputFile, "   ");
                        else
                                fprintf (outputFile, " | ");

                }

                for (int j = 0 ; j < size ; j++) {
                        if (j == size)
                                fprintf (outputFile, " |");
                        else if (grid->cells[i*size+j]->next == grid->cells[(i+1)*size+j])
                                fprintf (outputFile, "   ");
                        else
                                fprintf (outputFile, "___");

                        fprintf (outputFile, "   ");
                }
        }

        fclose(outputFile);
}

/* Lit une grille a partir d'un fichier. */
Grid*
readFile (const char *path) {
        const char rightDelimiter = 'r';
        const char bottomDelimiter = 'b';
        char line[256];

        unsigned long long roomValue = 0;
        unsigned short roomLength = 0;
        unsigned short gridSize = 0;

        unsigned int i = 0;
        unsigned int currentCell = 0;


        Grid *grid = NULL;
        FILE *inputFile = fopen(path, "r");

        if (inputFile != NULL) {
                fscanf(inputFile, "%s", line);

                gridSize = atoll(line);

                if (gridSize < MAX_SIZE)
                        grid = initializeGrid(gridSize);

                while (fscanf(inputFile, "%s", line) != EOF) {
                        while (line[i] >= '0' && line[i] <= '9') {
                                roomValue = roomValue * 10 + line[i++] - '0';
                        }

                        if (roomValue == 0)
                                printf("Error in input file format.\n");

                        if (line[i] == rightDelimiter) {
                                i++;

                                while (line[i] >= '0' && line[i] <= '9') {
                                        roomLength = roomLength * 10 + line[i++] - '0';
                                }

                                currentCell = setRightwardRoom(grid, currentCell, roomValue, roomLength);
                        }

                        else if (line[i] == bottomDelimiter) {
                                i++;

                                while (line[i] >= '0' && line[i] <= '9') {
                                        roomLength = roomLength * 10 + line[i++] - '0';
                                }

                                currentCell = setDownwardRoom(grid, currentCell, roomValue, roomLength);
                        }

                        else
                        printf("Error in input file format.\n");

                        i = 0;
                        roomValue = 0;
                        roomLength = 0;      
                }
        }

        else
                printf("Error reading input file.\n");

        return grid;
}

/* Assigne une salle horizontale aux cases correspondantes et renvoie la nouvelle position dans la grille. */
unsigned int
setRightwardRoom (Grid *grid, unsigned int currentCell, unsigned long long roomValue, unsigned short roomLength) {
        while (grid->cells[currentCell]->roomProduct != 0)
                currentCell++;

        for (unsigned short i=0; i<roomLength; i++) {
                grid->cells[currentCell+i]->roomProduct = roomValue;

                if (i>0)
                        grid->cells[currentCell+i]->previous = grid->cells[currentCell+(i-1)];
                        
                if (i<roomLength-1)
                        grid->cells[currentCell+i]->next = grid->cells[currentCell+(i+1)];
        }

        return currentCell+roomLength;
}

/* Assigne une salle verticale aux cases correspondantes et renvoie la nouvelle position dans la grille. */
unsigned int
setDownwardRoom (Grid *grid, unsigned int currentCell, unsigned long long roomValue, unsigned short roomLength) {
        while (grid->cells[currentCell]->roomProduct != 0)
                currentCell++;

        for (unsigned short i=0; i<roomLength; i++) {
                grid->cells[currentCell+i*grid->size]->roomProduct = roomValue;

                if (i>0)
                        grid->cells[currentCell+i*grid->size]->previous = grid->cells[currentCell+(i-1)*grid->size];

                if (i<roomLength-1)
                        grid->cells[currentCell+i*grid->size]->next = grid->cells[currentCell+(i+1)*grid->size];
        }

        return currentCell+1;
}

/* Creer une nouvelle grille vide et renvoie son pointeur. */
Grid*
initializeGrid (int size) {
        Grid *grid = malloc(sizeof(Grid));

        grid->size = size;  
        grid->cells = malloc(sizeof(Cell*) * grid->size * grid->size);

        for (unsigned int i=0; i<grid->size; i++)
                for (unsigned int j=0; j<grid->size; j++) {
                        grid->cells[i*grid->size+j] = malloc(sizeof(Cell));

                        grid->cells[i*grid->size+j]->value = 0;
                        grid->cells[i*grid->size+j]->roomProduct = 0;
                        grid->cells[i*grid->size+j]->previous = NULL;
                        grid->cells[i*grid->size+j]->next = NULL;
                }

        return grid;
}

/* Affiche une liste des valeurs de chaque cases de la grille. */
void
printValuesInGrid (Grid *grid) {
        printf("\nPrinting values in grid :\n");

        for (unsigned int i=0; i<grid->size; i++)
                for (unsigned int j=0; j<grid->size; j++)      
                        printf("Cell (%d,%d) = %lu [%llu]\n", i, j, grid->cells[i*grid->size+j]->value, grid->cells[i*grid->size+j]->roomProduct);

        printf("\n");
}

/* Libere l'espace en memoire utilise par la grille. */
void
freeGrid (Grid *grid) {
        for (unsigned int i=0; i<grid->size; i++)
                for (unsigned int j=0; j<grid->size; j++)
                        free(grid->cells[i*grid->size+j]);


        free(grid->cells);
        free(grid);
}
