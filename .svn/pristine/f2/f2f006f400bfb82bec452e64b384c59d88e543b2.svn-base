#include "composites.h"

#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

struct composite_t {
  /* Factor that makes up the factorized number. */
  uint64_t factor;
  /* Next factor that makes up the factorized number. */
  Composite* next;
};

struct composites_set_t {
  /* First factor that makes up this number. */
  Composite* firstFactor;
  /* Next set of factors that make up this same number. */
  CompositesSet* next;
};

/* Allocates, initializes and returns a new Composite. */
Composite*
generateEmptyComposite () {
  Composite* newComposite = malloc(sizeof(Composite));
  newComposite->factor = 0;
  newComposite->next = NULL;

  return newComposite;
}

/* Allocates, initializes and returns a new CompositesSet. */
CompositesSet*
generateEmptySet () {
  CompositesSet* newSet = malloc(sizeof(CompositesSet));
  newSet->firstFactor = generateEmptyComposite();
  newSet->next = NULL;

  return newSet;
}

/* Deallocates a Composite and all linked Composites. */
void
freeComposite (Composite* composite) {
  while (composite->next != NULL)
    freeComposite(composite->next);

  free(composite);
}

/* Deallocates a CompositesSet and all linked CompositesSets. */
void
freeCompositesSet (CompositesSet* set) {
  while (set->next != NULL)
    freeCompositesSet(set->next);

  freeComposite(set->firstFactor);
  free(set);
}

/* Prints all values of Composites within linked CompositesSets. */
void
printCompositesSets (CompositesSet* set) {
  while (set != NULL) {
    Composite* factor = set->firstFactor;

    while (factor != NULL) {
      printf("%lu ", factor->factor);

      factor = factor->next;
    }

    printf("\n");

    set = set->next;
  }
}

/* Find and returns CompositesSets that make up the product given as an
 * argument. */
CompositesSet*
findComposites (int product) {
  CompositesSet* startingSet = generateEmptySet();
  CompositesSet* iterator = startingSet;

  /* Trial division */
  unsigned int limit = floor(sqrt(product));

  for (unsigned int factor = 1; factor <= limit; factor++) {
    if (product % factor == 0 && product / factor != factor) {
      addCompositesToSet(iterator->firstFactor, factor, product / factor);

      iterator->next = generateEmptySet();
      iterator = iterator->next;
    }
  }

  free(iterator);

  return startingSet;
}

/* Not functional. */
/* Find and returns Composites that make up the product given as an argument and
 * add it to a preexisting CompositesSet. */
CompositesSet*
findSubComposites(unsigned int originalFactor,
                  int product,
                  CompositesSet* originalSet) {
  /* Trial division */
  unsigned int limit = floor(sqrt(product));

  for (unsigned int factor = 1; factor <= limit; factor++) {
    if (product % factor == 0 && product / factor != factor) {
      int isAlreadyPresent = 0;

      if (originalFactor == factor || originalFactor == product / factor) {
        isAlreadyPresent = 1;
      }

      else {
        Composite* iterator = originalSet->firstFactor;
        while (iterator != NULL) {
          if (iterator->factor == factor ||
              iterator->factor == product / factor) {
            isAlreadyPresent = 1;
            break;
          }

          iterator = iterator->next;
        }
      }

      if (isAlreadyPresent == 0) {
        Composite* newComposite = copyComposite(originalSet->firstFactor);

        addCompositeToSet(newComposite, originalFactor);
        addCompositesToSet(newComposite, factor, product / factor);

        CompositesSet* iterator = originalSet;
        while (iterator->next != NULL)
          iterator = iterator->next;

        iterator->next = generateEmptySet();
        iterator = iterator->next;
        iterator->firstFactor = newComposite;
      }
    }
  }

  return originalSet;
}

/* Adds the factor given as the last element to the Composite linked list given.
 */
void
addCompositeToSet (Composite* firstFactor, uint64_t factor) {
  Composite* currFactor = firstFactor;

  while (currFactor->next != NULL)
    currFactor = currFactor->next;

  if (currFactor->factor != 0) {
    currFactor->next = generateEmptyComposite();
    currFactor = currFactor->next;
  }

  currFactor->factor = factor;
}

/* Adds the factors given as the lasts elements to the Composite linked list
 * given. */
void
addCompositesToSet (Composite* firstFactor,
                    uint64_t factor1,
                    uint64_t factor2) {
  Composite* currFactor = firstFactor;

  while (currFactor->next != NULL)
    currFactor = currFactor->next;

  if (currFactor->factor != 0) {
    currFactor->next = generateEmptyComposite();
    currFactor = currFactor->next;
  }

  currFactor->factor = factor1;

  currFactor->next = generateEmptyComposite();
  currFactor = currFactor->next;
  currFactor->factor = factor2;
}

/* Takes a composite and returns a new one with the exact same values for it and
 * its linked Composites. */
Composite*
copyComposite (Composite* compositeToCopy) {
  Composite* tmpComposite = compositeToCopy;

  Composite* newComposite = malloc(sizeof(Composite));

  newComposite->factor = tmpComposite->factor;

  Composite* compositeTracker = newComposite;

  while (tmpComposite->next != NULL) {
    tmpComposite = tmpComposite->next;

    compositeTracker->next = malloc(sizeof(Composite));
    compositeTracker = compositeTracker->next;
    compositeTracker->factor = tmpComposite->factor;
  }

  compositeTracker->next = NULL;

  return newComposite;
}
