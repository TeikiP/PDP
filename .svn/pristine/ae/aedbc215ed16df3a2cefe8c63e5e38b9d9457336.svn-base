#include "bitset.h"

#include <stdint.h>
#include <stdio.h>

/* Tests if the two given values are equal, returns 1 if true, 0 otherwise. */
unsigned short equals(uint64_t value1, uint64_t value2) {
  return value1 == value2;
}

/* Sets the bit at a specific position of the provided value to 1. */
uint64_t set_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;

  return value |= 1ULL << (position - 1);
}

/* Sets the bit at a specific position of the provided value to 0. */
uint64_t clear_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;

  return value &= ~(1ULL << (position - 1));
}

/* Toggle the bit at a specific position of the provided value. */
uint64_t toggle_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;

  return value ^= 1ULL << (position - 1);
}

/* Returns the value of the bit at a specific position of the provided value. */
unsigned short check_bit(uint64_t value, unsigned short position) {
  if (position > 64 || position < 1)
    return 0;

  return (value >> (position - 1)) & 1U;
}

/* Returns the position of the first bit set to 1 within the provided integer. If no bits are set, returns 0. */
unsigned short find_first_set(uint64_t value) {
  return __builtin_ffsll(value);
}

/* Returns 1 if the value is a singleton, otherwise 0. */
unsigned short is_singleton(uint64_t value) {
  return value == 0 ? 0 : (value & (value - 1)) == 0;
}

/* Returns the bitwise intersection of two values. */
uint64_t bits_and(uint64_t value1, uint64_t value2) {
  return value1 & value2;
}

/* Returns the bitwise union of two values. */
uint64_t bits_or(uint64_t value1, uint64_t value2) {
  return value1 | value2;
}

/* Returns the bitwise exclusive union of two values. */
uint64_t bits_xor(uint64_t value1, uint64_t value2) {
  return value1 ^ value2;
}

/* Returns the bitwise flip of a value. */
uint64_t bits_flip(uint64_t value) {
  return ~value;
}

/* Prints the value of each bit for a given number. */
void print_bits(uint64_t value) {
  for (int i = 0; i < 64; i++) {
    /* Spacing */
    if (i % 8 == 0 && i != 0)
      printf(" ");

    printf("%lu", (value >> (63 - i)) & 1U);
  }

  printf("\n");
}

/* Cardinality #1 */
/* SWAR algorthim to count the number of bits set within an integer. */
/* Method provided by Guemon Amelie (Sudoku) and Matt Howells (StackOverflow).
 */
unsigned short popcount_mit_hakmem(uint64_t value) {
  value = value - ((value >> 1) & 0x5555555555555555);
  value = (value & 0x3333333333333333) + ((value >> 2) & 0x3333333333333333);

  return (((value + (value >> 4)) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >>
         56;
}

/* Cardinality #2 */
/* SWAR algorthim to count the number of bits set within an integer. */
/* Source: http://graphics.stanford.edu/~seander/bithacks.html */
unsigned short popcount_lookup_table(uint64_t value) {
  /*                  i = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15} */
  static short bits[16] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};

  unsigned short count = 0;

  for (; value; value >>= 4)
    count += bits[value & 0xF];

  return count;
}

/* Cardinality #3 */
/* Algorthim to count the number of bits set within an integer. */
/* Source: http://graphics.stanford.edu/~seander/bithacks.html */
unsigned short popcount_naive(uint64_t value) {
  unsigned short count = 0;

  for (; value; value >>= 1)
    count += value & 1U;

  return count;
}

/* Cardinality #4 */
/* Brian Kernighan's algorthim to count the number of bits set within an
 * integer. */
/* Source: http://graphics.stanford.edu/~seander/bithacks.html */
unsigned short popcount_kernighan(uint64_t value) {
  unsigned short count = 0;

  for (; value; count++)
    value &= value - 1;

  return count;
}

/* Cardinality #5 */
/* GCC function to call upon system specific preprocessor population counting
 * algorithm. */
unsigned short popcount_preprocessor(uint64_t value) {
  return __builtin_popcountll(value);
}

