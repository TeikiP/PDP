#include "island.h"

unsigned get_value(unsigned info_island) {
    return info_island & BIT_VALUE;
}

unsigned get_finished(unsigned info_island) {
    return (info_island & BIT_FINISHED) >> POS_BIT_FINISHED;
}

unsigned get_nb_bridge_up(unsigned info_island) {
    return (info_island & BIT_NB_BRIDGE_UP) >> POS_BIT_NB_BRIDGE_UP;
}

unsigned get_nb_bridge_down(unsigned info_island) {
    return (info_island & BIT_NB_BRIDGE_DOWN) >> POS_BIT_NB_BRIDGE_DOWN;
}

unsigned get_nb_bridge_left(unsigned info_island) {
    return (info_island & BIT_NB_BRIDGE_LEFT) >> POS_BIT_NB_BRIDGE_LEFT;
}

unsigned get_nb_bridge_right(unsigned info_island) {
    return (info_island & BIT_NB_BRIDGE_RIGHT) >> POS_BIT_NB_BRIDGE_RIGHT;
}

void set_finished(unsigned *info_island, unsigned finished) {
    *info_island = (*info_island&(0xFFFF - BIT_FINISHED)) | (finished << POS_BIT_FINISHED);
}

void set_nb_bridge_up(unsigned *info_island, unsigned nb_bridge_up) {
    *info_island = (*info_island&(0xFFFF - BIT_NB_BRIDGE_UP)) | (nb_bridge_up << POS_BIT_NB_BRIDGE_UP);
}

void set_nb_bridge_down(unsigned *info_island, unsigned nb_bridge_down) {
    *info_island = (*info_island&(0xFFFF - BIT_NB_BRIDGE_DOWN)) | (nb_bridge_down << POS_BIT_NB_BRIDGE_DOWN);
}

void set_nb_bridge_left(unsigned *info_island, unsigned nb_bridge_left) {
    *info_island = (*info_island&(0xFFFF - BIT_NB_BRIDGE_LEFT)) | (nb_bridge_left << POS_BIT_NB_BRIDGE_LEFT);
}

void set_nb_bridge_right(unsigned *info_island, unsigned nb_bridge_right) {
    *info_island = (*info_island&(0xFFFF - BIT_NB_BRIDGE_RIGHT)) | (nb_bridge_right << POS_BIT_NB_BRIDGE_RIGHT);
}

void initialize(Grid* grid, unsigned size_grid, unsigned nb_island) {
  grid->bridges = malloc(sizeof(unsigned)*(size_grid*size_grid-nb_island));
  for(unsigned i = 0; i < (size_grid*size_grid-nb_island); i++){
    grid->bridges[i]=0;
  }
  grid->pos = 0;
  grid->heuristic_used = 1;

  /* Allocation de la m�moire pour islands */
  grid->islands = malloc(sizeof(Island) * nb_island);
  if (grid->islands == NULL) {
    fprintf(stderr, "Allocation error.");
    exit(EXIT_FAILURE);
  }

  for (unsigned i = 0; i < nb_island; i++) {
    grid->islands[i].x = 0;
    grid->islands[i].y = 0;
    grid->islands[i].information_island = 0;

    grid->islands[i].up_neighbor = NULL;
    grid->islands[i].down_neighbor = NULL;
    grid->islands[i].left_neighbor = NULL;
    grid->islands[i].right_neighbor = NULL;

    grid->islands[i].linked_up_island = NULL;
    grid->islands[i].linked_down_island = NULL;
    grid->islands[i].linked_left_island = NULL;
    grid->islands[i].linked_right_island = NULL;
  }
}

heap create_heap(){
	heap h = malloc(sizeof(struct heap_s));
	if (h == NULL){
		fprintf(stderr, "problème d'allocation");
		exit(EXIT_FAILURE);
	}
	h->tab = malloc(10*sizeof(Grid));
	if (h->tab == NULL){
		fprintf(stderr, "problème d'allocation");
		exit(EXIT_FAILURE);
	}
	h->capacity = 10;
	h->size = 0;
	return h;
}

// bool game_equality(Grid g1, Grid g2){
//      bool res = true;
  //
	// if(game_nb_moves(g1) != game_nb_moves(g2)){ //test des �l�ments des deux jeux
	// 	res = false;
	// }
	// if(game_nb_pieces(g1) != game_nb_pieces(g2) && res){
	// 	res = false;
	// }
	// if(game_width(g1) != game_width(g2) && res){
	// 	res = false;
	// }
	// if(game_height(g1) != game_height(g2) && res){
	// 	res = false;
	// }
	// if (res){
	// 	for (unsigned i = 0 ; i < game_nb_pieces(g1) ; i++){	//boucle pour tester toutes les pieces des deux jeux
	// 		if (get_x(game_piece(g1, i)) != get_x(game_piece(g2, i)))
	// 			res = false;
	// 		if (get_y(game_piece(g1, i)) != get_y(game_piece(g2, i)))
	// 			res = false;
	// 		if (can_move_x(game_piece(g1, i)) != can_move_x(game_piece(g2, i)))
	// 			res = false;
	// 		if (can_move_y(game_piece(g1, i)) != can_move_y(game_piece(g2, i)))
	// 			res = false;
	// 		if (get_width(game_piece(g1, i)) != get_width(game_piece(g2, i)))
	// 			res = false;
	// 	}
	// }
//      return res;
// }

void copy_game(Grid src, Grid *dst, unsigned nb_island){
    for(unsigned j = 0; j < nb_island; j++){
    	dst->islands[j] = src.islands[j];
    }
    for(unsigned i = 0; i < src.pos; i++){
    	dst->bridges[i] = src.bridges[i];
    }
    dst->pos = src.pos;
    dst->heuristic_used = 1;
}

void delete_game(heap h, Grid* grid){
  free(grid->islands);
  free(grid->bridges);
  free(grid);

  h->size--;
}

void delete_heap(heap h){
    while(h->size > 0) {
	    delete_game(h, &(h->tab[h->size-1]));
    }
  free(h->tab);
	free(h);
}

void insert_value(heap h, Grid g, unsigned size_grid, unsigned nb_island){
  Grid* new_grid = malloc(sizeof(Grid));
	if(h->size >= h->capacity){ 	//réallocation de 2* la capacité du tas
		unsigned new_size = 2*h->capacity;
    	h->tab = realloc(h->tab, new_size*sizeof(Grid));
    	h->capacity = new_size;
	}
  initialize(new_grid, size_grid, nb_island);
	h->tab[h->size] = *new_grid;
	copy_game (g, &(h->tab[h->size]), nb_island);
	h->size++;
}
