#include "composites.h"

#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

/* Allocates, initializes and returns a new Composite. */
Composite* generate_empty_composite() {
  Composite* new_composite = malloc(sizeof(Composite));
  new_composite->factor = 0;
  new_composite->next = NULL;

  return new_composite;
}

/* Allocates, initializes and returns a new CompositesSet. */
CompositesSet* generate_empty_set() {
  CompositesSet* new_set = malloc(sizeof(CompositesSet));
  new_set->first_composite = generate_empty_composite();
  new_set->next = NULL;

  return new_set;
}

/* This function does not currently work as intended due to a pointer issue. */
/* Deallocates a Composite and all linked Composites. */
void free_composite(Composite* composite) {
  if (composite != NULL) {
    while (composite->next != NULL)
      free_composite(composite->next);

    free(composite);
  }
}

/* Deallocates a CompositesSet and all linked CompositesSets. */
void free_composites_set(CompositesSet* set) {
  if (set != NULL) {
    while (set->next != NULL)
      free_composites_set(set->next);

    free_composite(set->first_composite);
    free(set);
  }
}

/* Returns the number of composites within the given set. */
int get_set_length(CompositesSet* set) {
  int length = 0;
  Composite* iterator = NULL;

  if (set != NULL)
    iterator = set->first_composite;

  while (iterator != NULL) {
    length++;
    iterator = iterator->next;
  }

  return length;
}

/* Prints all values of Composites within linked CompositesSets. */
void print_composites_set(CompositesSet* set) {
  while (set != NULL) {
    Composite* factor = set->first_composite;

    while (factor != NULL) {
      printf("%lu ", factor->factor);

      factor = factor->next;
    }

    printf("\n");

    set = set->next;
  }
  printf("\n");
}

/* Adds the factor given as the last element to the Composite linked list given.
 */
void add_composite_to_set(Composite* first_composite, uint64_t factor) {
  Composite* iterator = first_composite;

  /* Find the end of the set */
  while (iterator->next != NULL)
    iterator = iterator->next;

  /* Add factor at the end */
  if (iterator->factor != 0) {
    iterator->next = generate_empty_composite();
    iterator = iterator->next;
  }

  iterator->factor = factor;
}

/* Adds the factors given as the lasts elements to the Composite linked list
 * given. */
void add_composites_to_set(Composite* first_composite,
                           uint64_t factor1,
                           uint64_t factor2) {
  Composite* iterator = first_composite;

  /* Find the end of the set */
  while (iterator->next != NULL)
    iterator = iterator->next;

  /* Add factors at the end */
  if (iterator->factor != 0) {
    iterator->next = generate_empty_composite();
    iterator = iterator->next;
  }

  iterator->factor = factor1;

  iterator->next = generate_empty_composite();
  iterator = iterator->next;
  iterator->factor = factor2;
}

/* Takes a composite and returns a new one with the exact same values for it and
 * its linked Composites. */
Composite* copy_composite(Composite* composite_to_copy) {
  Composite* new_composite = malloc(sizeof(Composite));
  new_composite->factor = composite_to_copy->factor;

  Composite* original_iterator = composite_to_copy;
  Composite* new_iterator = new_composite;

  /* Copy all linked Composites */
  while (original_iterator->next != NULL) {
    original_iterator = original_iterator->next;

    new_iterator->next = malloc(sizeof(Composite));
    new_iterator = new_iterator->next;
    new_iterator->factor = original_iterator->factor;
  }

  new_iterator->next = NULL;

  return new_composite;
}

/* Appends the sub_set CompositesSet to the main_set, replacing the
 * factor_to_remove whithin it. */
CompositesSet* merge_sets(CompositesSet* main_set,
                          CompositesSet* sub_set,
                          uint64_t factor_to_remove) {
  if (main_set != NULL && sub_set != NULL) {
    /* Find last set in main set */
    while (main_set->next != NULL)
      main_set = main_set->next;

    /* Make a copy of last composite of the current main set */
    Composite* copy = copy_composite(main_set->first_composite);

    /* Remove the factor to be replaced from the copied set */
    Composite* iterator = copy;
    Composite* previous = NULL;

    while (iterator != NULL && iterator->factor != factor_to_remove) {
      previous = iterator;
      iterator = iterator->next;
    }

    if (previous == NULL) {
      copy = iterator->next;
      free(iterator);
    }

    else {
      Composite* cmp_to_remove = previous->next;
      previous->next = cmp_to_remove->next;
      free(cmp_to_remove);
    }

    CompositesSet* sub_set_iterator = sub_set;

    do {
      /* Add a copy of the last composites at the end of the main set */
      main_set->next = generate_empty_set();
      main_set = main_set->next;
      main_set->first_composite = copy_composite(copy);

      /* Find last composite in current main set */
      Composite* iterator = main_set->first_composite;
      while (iterator->next != NULL)
        iterator = iterator->next;

      /* Add current sub set to current composite in main set */
      iterator->next = copy_composite(sub_set_iterator->first_composite);

      /* Repeat for next set in sub_set */
      sub_set_iterator = sub_set_iterator->next;
    } while (sub_set_iterator != NULL);

    /* Free unused memory */
    /*free_composites_set(sub_set);*/
  }

  return main_set;
}

CompositesSet* find_subsets(unsigned int product, unsigned int max_size) {
  CompositesSet* starting_set = generate_empty_set();
  CompositesSet* iterator = starting_set;

  /* Search boundaries */
  unsigned int lower_limit = ceil((double)product / (double)max_size) < 2
                                 ? 2
                                 : ceil((double)product / (double)max_size);

  unsigned int upper_limit =
      floor(sqrt(product)) > max_size ? max_size : floor(sqrt(product));

  /* Trial division */
  for (unsigned int factor = lower_limit; factor <= upper_limit; factor++) {
    if (product % factor == 0 && product / factor != factor) {
      /* Add both factors found */
      iterator->next = generate_empty_set();
      iterator = iterator->next;
      add_composites_to_set(iterator->first_composite, factor,
                            product / factor);

      /* Subfactorisation */
      CompositesSet* sub_sets = find_subsets(factor, max_size);
      iterator = merge_sets(iterator, sub_sets, factor);

      sub_sets = find_subsets(product / factor, max_size);
      iterator = merge_sets(iterator, sub_sets, product / factor);
    }
  }

  /* Clean up */
  iterator = starting_set;
  starting_set = starting_set->next;
  free(iterator);

  return starting_set;
}

/* Find and returns CompositesSets that make up the product given as an
 * argument, with max size being the upper limit that a factor can be. */
CompositesSet* find_composites(unsigned int product, unsigned int max_size) {
  CompositesSet* starting_set = generate_empty_set();
  CompositesSet* iterator = starting_set;

  if (product <= max_size) {
    /* Add (product) */
    iterator->next = generate_empty_set();
    iterator = iterator->next;
    add_composite_to_set(iterator->first_composite, product);

    /* Add (product * 1) */
    iterator->next = generate_empty_set();
    iterator = iterator->next;
    add_composites_to_set(iterator->first_composite, 1, product);
  }

  /* Search boundaries */
  unsigned int lower_limit = ceil((double)product / (double)max_size) < 2
                                 ? 2
                                 : ceil((double)product / (double)max_size);

  unsigned int upper_limit =
      floor(sqrt(product)) > max_size ? max_size : floor(sqrt(product));

  /* Trial division */
  for (unsigned int factor = lower_limit; factor <= upper_limit; factor++) {
    if (product % factor == 0 && product / factor != factor) {
      /* Add both factors found */
      iterator->next = generate_empty_set();
      iterator = iterator->next;
      add_composites_to_set(iterator->first_composite, factor,
                            product / factor);

      /* Subfactorisation */
      CompositesSet* sub_sets = find_subsets(factor, max_size);
      iterator = merge_sets(iterator, sub_sets, factor);

      sub_sets = find_subsets(product / factor, max_size);
      iterator = merge_sets(iterator, sub_sets, product / factor);

      /* Add both factors and 1 */
      iterator->next = generate_empty_set();
      iterator = iterator->next;
      add_composite_to_set(iterator->first_composite, 1);
      add_composites_to_set(iterator->first_composite, factor,
                            product / factor);

      /* Subfactorisation with the extra 1 */
      sub_sets = find_subsets(factor, max_size);
      iterator = merge_sets(iterator, sub_sets, factor);

      sub_sets = find_subsets(product / factor, max_size);
      iterator = merge_sets(iterator, sub_sets, product / factor);
    }
  }

  /* Clean up */
  iterator = starting_set;
  starting_set = starting_set->next;
  free(iterator);

  return starting_set;
}
