#include "bitset.h"
#include "composites.h"

#include <errno.h>
#include <inttypes.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define MAX_GRID_SIZE 64
#define MAX_ROOM_SIZE_SOLVER 20
#define MAX_ROOM_SIZE_GENERATOR 3

typedef struct cell_t cell_t;
struct cell_t {
  /* Value within the cell. */
  uint64_t value;
  /* Required product for cells in the current room. */
  unsigned long long room_product;
  /* Sets of factors that make up this room_product. */
  composites_set_t* composites_set;
  /* Room length. */
  unsigned short room_length;
  /* Previous cell in the current room. */
  cell_t* previous;
  /* Next cell in the current room. */
  cell_t* next;
};

typedef struct grid_t {
  /* Grid that we are working on. */
  cell_t** cells;
  /* Size of this grid. */
  size_t size;
  /* Number of cells solved by heuristics */
  unsigned int heuristics;
} grid_t;

/* Makes a rightward room in the grid and returns the update grid reading
 * position. */
static unsigned int set_rightward_room(grid_t* grid,
                                       unsigned int current_cell,
                                       unsigned long long room_value,
                                       unsigned short room_length) {
  /* We generate a composite set for this room */
  composites_set_t* room_set =
      find_composites(room_value, grid->size, room_length);

  /* We skip over cells that have already been assigned */
  while (grid->cells[current_cell]->room_product != 0)
    current_cell++;

  /* We set values for each cell in the room */
  for (unsigned short i = 0; i < room_length; i++) {
    grid->cells[current_cell + i]->room_product = room_value;
    grid->cells[current_cell + i]->composites_set = room_set;
    grid->cells[current_cell + i]->room_length = room_length;

    if (i > 0)
      grid->cells[current_cell + i]->previous =
          grid->cells[current_cell + (i - 1)];

    if (i < room_length - 1)
      grid->cells[current_cell + i]->next = grid->cells[current_cell + (i + 1)];
  }

  return current_cell + room_length;
}

/* Makes a downward room in the grid and returns the update grid reading
 * position. */
static unsigned int set_downward_room(grid_t* grid,
                                      unsigned int current_cell,
                                      unsigned long long room_value,
                                      unsigned short room_length) {
  /* We generate a composite set for this room */
  composites_set_t* room_set =
      find_composites(room_value, grid->size, room_length);

  /* We skip over cells that have already been assigned */
  while (grid->cells[current_cell]->room_product != 0)
    current_cell++;

  /* We set values for each cell in the room */
  for (unsigned short i = 0; i < room_length; i++) {
    grid->cells[current_cell + i * grid->size]->room_product = room_value;
    grid->cells[current_cell + i * grid->size]->composites_set = room_set;
    grid->cells[current_cell + i * grid->size]->room_length = room_length;

    if (i > 0)
      grid->cells[current_cell + i * grid->size]->previous =
          grid->cells[current_cell + (i - 1) * grid->size];

    if (i < room_length - 1)
      grid->cells[current_cell + i * grid->size]->next =
          grid->cells[current_cell + (i + 1) * grid->size];
  }

  return current_cell + 1;
}

/* Allocates a new empty grid and returns a pointer to it. */
static grid_t* initialize_grid(size_t size) {
  grid_t* grid = malloc(sizeof(grid_t));

  grid->size = size;
  grid->heuristics = 0;
  grid->cells = malloc(sizeof(cell_t*) * grid->size * grid->size);

  for (unsigned int i = 0; i < grid->size; i++)
    for (unsigned int j = 0; j < grid->size; j++) {
      grid->cells[i * grid->size + j] = malloc(sizeof(cell_t));

      grid->cells[i * grid->size + j]->value = 0;
      grid->cells[i * grid->size + j]->room_product = 0;
      grid->cells[i * grid->size + j]->room_length = 0;
      grid->cells[i * grid->size + j]->composites_set = NULL;
      grid->cells[i * grid->size + j]->previous = NULL;
      grid->cells[i * grid->size + j]->next = NULL;
    }

  return grid;
}

/* Checks if all cells of a grid have been filled according to the size it is
 * expected to have. Returns 1 if it is valid, 0 otherwise. */
static int check_grid_size(grid_t* grid) {
  for (unsigned int y = 0; y < grid->size; y++)
    for (unsigned int x = 0; x < grid->size; x++)
      if (grid->cells[y * grid->size + x]->room_product == 0)
        return 0;

  return 1;
}

/* Reads a grid from an input file. Returns NULL if the file is invalid. */
static grid_t* read_file(const char* path) {
  const char right_delimiter = 'r';
  const char bottom_delimiter = 'b';
  char line[256];

  unsigned long long room_value = 0;
  unsigned short room_length = 0;
  unsigned short grid_size = 0;

  unsigned int i = 0;
  unsigned int current_cell = 0;

  grid_t* grid = NULL;
  FILE* input_file = fopen(path, "r");

  if (input_file != NULL) {
    /* Reads the grid size from the first line */
    fscanf(input_file, "%s", line);

    grid_size = atoll(line);

    if (grid_size <= MAX_GRID_SIZE)
      grid = initialize_grid(grid_size);
      
    else
      printf("Error in grid size. The size cannot be larger than %d.\n", MAX_GRID_SIZE);

    /* Reads the input file line by line */
    while (fscanf(input_file, "%s", line) != EOF) {
      /* Reads the room product value */
      while (line[i] >= '0' && line[i] <= '9') {
        room_value = room_value * 10 + line[i++] - '0';
      }

      if (room_value == 0) {
        printf("Error in input file format.\n");
        return NULL;
      }

      if (line[i] == right_delimiter) {
        i++;

        /* Reads the room length */
        while (line[i] >= '0' && line[i] <= '9') {
          room_length = room_length * 10 + line[i++] - '0';
        }

        if (room_length == 0) {
          printf("Error in input file format.\n");
          return NULL;
        }

        else if (room_length > MAX_ROOM_SIZE_SOLVER) {
          printf("Rooms cannot be larger than %d\n", MAX_ROOM_SIZE_SOLVER);
          return NULL;
        }

        /* Sets all cells in the room and updates the position */
        current_cell =
            set_rightward_room(grid, current_cell, room_value, room_length);
      }

      else if (line[i] == bottom_delimiter) {
        i++;

        /* Reads the room length */
        while (line[i] >= '0' && line[i] <= '9') {
          room_length = room_length * 10 + line[i++] - '0';
        }

        if (room_length == 0) {
          printf("Error in input file format.\n");
          return NULL;
        }

        else if (room_length > MAX_ROOM_SIZE_SOLVER) {
          printf("Rooms cannot be larger than %d\n", MAX_ROOM_SIZE_SOLVER);
          return NULL;
        }

        /* Sets all cells in the room and updates the position */
        current_cell =
            set_downward_room(grid, current_cell, room_value, room_length);
      }

      else
        printf("Error in input file format.\n");

      i = 0;
      room_value = 0;
      room_length = 0;
    }

    if (check_grid_size(grid) == 0) {
      printf("The input file is invalid.\n");
      return NULL;
    }
  }

  else
    printf("Error reading input file.\n");

  errno = 0;
  if (fclose(input_file) != 0)
    printf("Error : %d\n", errno);

  return grid;
}

/* Prints the grid in a human readable way in a new output file or in the
 * console if no filename is provided. Remembers the last pathname used. */
static void print_grid(grid_t* grid, char* path) {
  static char* output_name = NULL;

  if (path != NULL)
    output_name = path;

  FILE* output_file = NULL;

  /* Check if a filename is provided, otherwise use stdout */
  if (path == NULL) {
    if (output_name != NULL)
      output_file = fopen(output_name, "a");

    else
      output_file = stdout;
  }

  else
    output_file = fopen(output_name, "w");

  if (output_file != NULL) {
    int size = grid->size;

    /* First line */
    fprintf(output_file, "|");

    for (int k = 0; k < size - 1; k++)
      fprintf(output_file, "------");

    fprintf(output_file, "-----|");

    /* For each line */
    for (int i = 0; i < size; i++) {
      fprintf(output_file, "\n| ");

      /* For each cell, print it */
      for (int j = 0; j < size; j++) {
        if (grid->cells[i * size + j]->value < 10)
          fprintf(output_file, " %" PRIu64 " ",
                  grid->cells[i * size + j]->value);
        else if (grid->cells[i * size + j]->value < 100)
          fprintf(output_file, "%" PRIu64 " ",
                  grid->cells[i * size + j]->value);
        else
          fprintf(output_file, "%" PRIu64, grid->cells[i * size + j]->value);

        if (j == size - 1)
          fprintf(output_file, " |\n");
        else if (grid->cells[i * size + j]->next ==
                 grid->cells[i * size + j + 1])
          fprintf(output_file, "   ");
        else
          fprintf(output_file, " | ");
      }

      /* For each cell that isn't on the last row, print the delimiters under it
       */
      if (i < size - 1) {
        fprintf(output_file, "| ");

        for (int j = 0; j < size; j++) {
          if (j == size)
            fprintf(output_file, " |");
          else if ((i + 1) < size &&
                   grid->cells[i * size + j]->next ==
                       grid->cells[(i + 1) * size + j])
            fprintf(output_file, "   ");
          else
            fprintf(output_file, "---");

          if (j == size - 1)
            fprintf(output_file, " |");
          else
            fprintf(output_file, "   ");
        }
      }
    }

    /* Last line */
    fprintf(output_file, "|");

    for (int k = 0; k < size - 1; k++)
      fprintf(output_file, "------");

    fprintf(output_file, "-----|\n");
  }

  /* Error checking */
  else
    printf("Error opening output file.\n");

  errno = 0;
  if (output_file != stdout && fclose(output_file) != 0)
    printf("Error : %d\n", errno);
}

/* Deallocates the memory used by the grid. */
static void free_grid(grid_t* grid) {
  if (grid != NULL) {
    for (unsigned int i = 0; i < grid->size; i++)
      for (unsigned int j = 0; j < grid->size; j++) {
        /* Frees up a composites_set_t assigned to a room */
        if (grid->cells[i * grid->size + j]->composites_set != NULL) {
          free_composites_set(grid->cells[i * grid->size + j]->composites_set);

          cell_t* iterator = grid->cells[i * grid->size + j];
          while (iterator->next != NULL) {
            iterator = iterator->next;
            iterator->composites_set = NULL;
          }
        }

        /* Frees up a cell */
        free(grid->cells[i * grid->size + j]);
      }

    free(grid->cells);
    free(grid);
  }
}

/* Checks if the row of a given cell has no duplicate numbers. Returns 1 if row
 * is valid, 0 otherwise. */
static int check_row(grid_t* grid, unsigned int x, unsigned int y) {
  int is_valid = 1;

  uint64_t cell_value = grid->cells[y * grid->size + x]->value;

  for (unsigned int i = 0; i < grid->size; i++) {
    if (i == x)
      continue;

    else if (cell_value == grid->cells[y * grid->size + i]->value) {
      is_valid = 0;
      break;
    }
  }

  return is_valid;
}

/* Checks if the column of a given cell has no duplicate numbers. Returns 1 if
 * column is valid, 0 otherwise. */
static int check_col(grid_t* grid, unsigned int x, unsigned int y) {
  int is_valid = 1;

  uint64_t cell_value = grid->cells[y * grid->size + x]->value;

  for (unsigned int i = 0; i < grid->size; i++) {
    if (i == y)
      continue;

    else if (cell_value == grid->cells[i * grid->size + x]->value) {
      is_valid = 0;
      break;
    }
  }

  return is_valid;
}

/* Checks if the room of a given cell makes the expected product. Returns 1 if
 * room is valid, 0 if all cells are filled but do not make up the proper
 * product, -1 if the room isn't fully filled. */
static int check_room(grid_t* grid, unsigned int x, unsigned int y) {
  int is_valid = 1;

  cell_t* iterator = grid->cells[y * grid->size + x];
  unsigned long long current_product = 1;
  unsigned long long expected_product = iterator->room_product;

  while (iterator->previous != NULL)
    iterator = iterator->previous;

  while (iterator->next != NULL) {
    current_product *= iterator->value;
    iterator = iterator->next;
  }

  current_product *= iterator->value;

  if (current_product == 0)
    is_valid = -1;

  else if (current_product != expected_product)
    is_valid = 0;

  return is_valid;
}

/* Checks if a single cell is valid. Returns 1 if cell is valid, 0 otherwise, -1
 * if the rows and columns are valid but the room is still unfilled. */
static int check_cell(grid_t* grid, unsigned int x, unsigned int y) {
  int is_valid = 1;

  is_valid *= check_row(grid, x, y);
  is_valid *= check_col(grid, x, y);
  is_valid *= check_room(grid, x, y);

  return is_valid;
}

/* Checks if a grid is valid. Returns 1 if everything is valid, 0 otherwise. */
static int check_grid(grid_t* grid) {
  for (unsigned int y = 0; y < grid->size; y++)
    for (unsigned int x = 0; x < grid->size; x++)
      if (check_cell(grid, x, y) != 1)
        return 0;

  return 1;
}

/*Fills all rooms that only have one cell with the value of that room. */
static void fill_single_cells(grid_t* grid) {
  for (unsigned int y = 0; y < grid->size; y++) {
    for (unsigned int x = 0; x < grid->size; x++) {
      if (grid->cells[y * grid->size + x]->room_length == 1) {
        grid->cells[y * grid->size + x]->value =
            grid->cells[y * grid->size + x]->room_product;
        grid->heuristics++;
      }
    }
  }
}

/* Attempts to solve the grid. 1 if a solution was found, 0 otherwise.*/
static int solve_cell(grid_t* grid,
                      unsigned int x,
                      unsigned int y,
                      int flag_verbose) {
  cell_t* current_cell = grid->cells[y * grid->size + x];

  /* If the cell hasn't been set yet */
  if (current_cell->value == 0) {
    composites_set_t* set_iterator = current_cell->composites_set;

    do {
      /* Find next set of appropriate length */
      while (set_iterator != NULL &&
             get_set_length(set_iterator) != current_cell->room_length)
        set_iterator = set_iterator->next;

      /* If there are no sets left, skip the process and backtrack */
      if (set_iterator != NULL) {
        /* Find potential values for cell within current set */
        for (unsigned short i = 0; i < 64; i++) {
          if (bits_and(set_iterator->factors, 1ULL << i)) {
            current_cell->value = i + 1;

            int is_cell_valid = check_cell(grid, x, y);

            /* If cell valid or potentially valid */
            if (is_cell_valid != 0) {
              unsigned int new_x = x + 1;
              unsigned int new_y = y;

              /* If we have reached the end of the row */
              if (new_x >= grid->size) {
                new_x = 0;
                new_y++;
              }

              /* If we have reached the end of the grid */
              if (new_y >= grid->size)
                return 1;

              /* Otherwise, we check the next cell */
              else {
                if (flag_verbose)
                  print_grid(grid, NULL);

                if (solve_cell(grid, new_x, new_y, flag_verbose) == 1)
                  return 1;

                else
                  continue;
              }
            }

            /* If cell is invalid */
            else
              continue;
          }
        }

        set_iterator = set_iterator->next;
      }

    } while (set_iterator != NULL);

    /* If no solutions found with the current grid, reset the cell value */
    current_cell->value = 0;

    return 0;
  }

  /* If the cell has already been set */
  else {
    unsigned int new_x = x + 1;
    unsigned int new_y = y;

    /* If we have reached the end of the row */
    if (new_x >= grid->size) {
      new_x = 0;
      new_y++;
    }

    /* If we have reached the end of the grid */
    if (new_y >= grid->size)
      return 1;

    /* Otherwise, we check the next cell */
    else
      return solve_cell(grid, new_x, new_y, flag_verbose);
  }
}

/* Mainly a wrapper for solve_cell that also calls upon heuristics first.
 * Returns 1 if the grid has been solved, 0 otherwise.
 */
static int solve_grid(grid_t* grid, int flag_verbose) {
  /* Fills up all single-celled rooms */
  fill_single_cells(grid);

  /* If verbose is on, print the grid after heuristics */
  if (flag_verbose)
    print_grid(grid, NULL);

  /* Attempts to fill up the rest of the grid */
  return solve_cell(grid, 0, 0, flag_verbose);
}

/* Attempts so count the number of solutions that can be derived from this cell
 * of the grid. 'solutions_counter' is that amount of solutions currently known
 * to this grid by the parent function.
 * Returns 0 if no solution is known.
 * Returns 1 if one solution is known.
 * Returns 2 if at least two solutions are known. */
static int solve_cell_strict(grid_t* grid,
                             unsigned int x,
                             unsigned int y,
                             unsigned int solutions_counter) {
  cell_t* current_cell = grid->cells[y * grid->size + x];

  /* If the cell hasn't been set yet */
  if (current_cell->value == 0) {
    composites_set_t* set_iterator = current_cell->composites_set;

    do {
      /* Find next set of appropriate length */
      while (set_iterator != NULL &&
             get_set_length(set_iterator) != current_cell->room_length)
        set_iterator = set_iterator->next;

      /* If there are no sets left, skip the process and backtrack */
      if (set_iterator != NULL) {
        /* Find potential values for cell within current set */
        for (unsigned short i = 0; i < 64; i++) {
          /* We compare the current bit to the current bit set to see
             if the cell can take this value */
          if (bits_and(set_iterator->factors, 1ULL << i)) {
            current_cell->value = i + 1;

            int is_cell_valid = check_cell(grid, x, y);

            /* If cell valid or potentially valid */
            if (is_cell_valid != 0) {
              unsigned int new_x = x + 1;
              unsigned int new_y = y;

              /* If we have reached the end of the row */
              if (new_x >= grid->size) {
                new_x = 0;
                new_y++;
              }

              /* If we have reached the end of the grid */
              if (new_y >= grid->size) {
                current_cell->value = 0;
                return 1;
              }

              /* Otherwise, we check the next cell */
              else {
                int sub_counter =
                    solve_cell_strict(grid, new_x, new_y, solutions_counter);

                if (sub_counter == 1) {
                  /* If a solution has been found and one is already known */
                  if (solutions_counter == 1) {
                    current_cell->value = 0;
                    return 2;
                  }

                  /* If the first solution has been found, keep going */
                  else {
                    solutions_counter = 1;
                    continue;
                  }
                }

                /* If two solutions have been found, return 2 to the parent */
                else if (sub_counter == 2) {
                  current_cell->value = 0;
                  return 2;
                }

                /* If no solution has been found, keep going */
                else
                  continue;
              }
            }

            /* If cell is invalid */
            else
              continue;
          }
        }

        set_iterator = set_iterator->next;
      }

    } while (set_iterator != NULL);

    /* If no solutions found with the current grid, reset the cell value */
    current_cell->value = 0;

    return solutions_counter;
  }

  /* If the cell has already been set */
  else {
    unsigned int new_x = x + 1;
    unsigned int new_y = y;

    /* If we have reached the end of the row */
    if (new_x >= grid->size) {
      new_x = 0;
      new_y++;
    }

    /* If we have reached the end of the grid */
    if (new_y >= grid->size)
      return 1;

    /* Otherwise, we check the next cell */
    else
      return solve_cell_strict(grid, new_x, new_y, solutions_counter);
  }
}

/* Mainly a wrapper for solve_cell_strict.
 * Returns 0 if the grid isn't solvable.
 * Returns 1 if the grid has an unique solution.
 * Returns 2 if the grid has at least two solutions.
 */
static int solve_grid_strict(grid_t* grid) {
  for (unsigned int i = 0; i < grid->size * grid->size; i++) {
    /* Reset all the cell values so that the solver can try to fill them and
     * count the amount of solutions */
    grid->cells[i]->value = 0;

    /* We generate a composite set for this room to be used by the solver */
    if (grid->cells[i]->composites_set == NULL) {
      composites_set_t* room_set =
          find_composites(grid->cells[i]->room_product, grid->size,
                          grid->cells[i]->room_length);

      grid->cells[i]->composites_set = room_set;

      cell_t* iterator = grid->cells[i]->next;

      while (iterator != NULL) {
        iterator->composites_set = room_set;
        iterator = iterator->next;
      }
    }
  }

  /* Fills up all single-celled rooms */
  fill_single_cells(grid);

  /* Attempts to fill up the rest of the grid */
  return solve_cell_strict(grid, 0, 0, 0);
}

/* Randomly makes room in a generated grid. */
static grid_t* random_rooms(grid_t* grid) {
  for (unsigned int y = 0; y < grid->size; y++) {
    for (unsigned int x = 0; x < grid->size; x++) {
      if (grid->cells[y * grid->size + x]->room_length == 0) {
        unsigned short direction = rand() % 2;

        /* downwards */
        if (direction == 0) {
          size_t length = 0;
          unsigned short random_percent = 0;
          unsigned long long product = 1;

          /* Determine room length */
          do {
            length++;
            random_percent = rand() % 100 + 1;
          } while (length < MAX_ROOM_SIZE_GENERATOR && length < (grid->size - y) &&
                   grid->cells[(y + length) * grid->size + x]->room_length ==
                       0 &&
                   random_percent > 20);

          /* Set values for the cells of the room */
          for (unsigned short i = 0; i < length; i++) {
            /* room length */
            grid->cells[(y + i) * grid->size + x]->room_length = length;

            /* previous */
            if (i > 0)
              grid->cells[(y + i) * grid->size + x]->previous =
                  grid->cells[(y + i - 1) * grid->size + x];

            /* next */
            if (i < length - 1)
              grid->cells[(y + i) * grid->size + x]->next =
                  grid->cells[(y + i + 1) * grid->size + x];

            product *= grid->cells[(y + i) * grid->size + x]->value;
          }

          /* room product */
          for (unsigned short i = 0; i < length; i++)
            grid->cells[(y + i) * grid->size + x]->room_product = product;
        }

        /* rightwards */
        else {
          size_t length = 0;
          unsigned short random_percent = 0;
          unsigned long long product = 1;

          /* Determine room length */
          do {
            length++;
            random_percent = rand() % 100 + 1;
          } while (length < MAX_ROOM_SIZE_GENERATOR && length < (grid->size - x) &&
                   grid->cells[y * grid->size + x + length]->room_length == 0 &&
                   random_percent > 20);

          /* Set values for the cells of the room */
          for (unsigned short i = 0; i < length; i++) {
            /* room length */
            grid->cells[y * grid->size + x + i]->room_length = length;

            /* previous */
            if (i > 0)
              grid->cells[y * grid->size + x + i]->previous =
                  grid->cells[y * grid->size + x + i - 1];

            /* next */
            if (i < length - 1)
              grid->cells[y * grid->size + x + i]->next =
                  grid->cells[y * grid->size + x + i + 1];

            product *= grid->cells[y * grid->size + x + i]->value;
          }

          /* room product */
          for (unsigned short i = 0; i < length; i++)
            grid->cells[y * grid->size + x + i]->room_product = product;
        }
      }
    }
  }

  return grid;
}

/* Randomly generates the value of the cell whose coordinates are given as
 * arguments and returns 1. Returns 0 if no values can be assigned to the cell
 * in a way that will keep the grid valid. */
static int randomize_cell_value(grid_t* grid, unsigned int x, unsigned int y) {
  uint64_t cell_value_orig = grid->cells[y * grid->size + x]->value;
  uint64_t cell_value = cell_value_orig;

  unsigned short nb_values = popcount_mit_hakmem(cell_value);

  while (nb_values > 0) {
    /* Randomly pick one of the possibilities */
    unsigned short set_bit_index = rand() % nb_values + 1;

    /* Find the corresponding bit */
    unsigned short bit_to_set = 0, set_bits = 0;
    while (set_bits != set_bit_index) {
      bit_to_set++;

      if (check_bit(cell_value, bit_to_set) == 1)
        set_bits++;
    }

    /* Clear possibility for all cells on this row and keep a trace of it */
    unsigned short row_was_cleared[MAX_GRID_SIZE] = {0};
    
    for (unsigned short j = 0; j < grid->size; j++) {
      if (check_bit(grid->cells[y * grid->size + j]->value, bit_to_set)) {
        row_was_cleared[j] =  1;
        
        grid->cells[y * grid->size + j]->value =
            clear_bit(grid->cells[y * grid->size + j]->value, bit_to_set);            
      }
    }

    /* Clear possibility for all cells on this column and keep a trace of it */
    unsigned short col_was_cleared[MAX_GRID_SIZE] = {0};
    
    for (unsigned short j = 0; j < grid->size; j++) {
      if (check_bit(grid->cells[j * grid->size + x]->value, bit_to_set)) {
        col_was_cleared[j] = 1;
      
        grid->cells[j * grid->size + x]->value =
            clear_bit(grid->cells[j * grid->size + x]->value, bit_to_set);
            
      }
    }

    /* Set this cell to have only this bit set */
    grid->cells[y * grid->size + x]->value = 0;
    grid->cells[y * grid->size + x]->value =
        set_bit(grid->cells[y * grid->size + x]->value, bit_to_set);

    /* Get next cell coordinates */
    unsigned int new_x = x + 1;
    unsigned int new_y = y;

    /* If we have reached the end of the row */
    if (new_x >= grid->size) {
      new_x = 0;
      new_y++;
    }

    /* If we have reached the end of the grid, mark cell as valid */
    if (new_y >= grid->size)
      return 1;

    /* Otherwise, we proceed to the next cell */
    else {
      /* If the next cell has been validated, valid this one as well */
      if (randomize_cell_value(grid, new_x, new_y) == 1)
        return 1;

      /* If the next cell is invalid, revert changes applied and try another
       * number */
      else {
        /* Readd possibility for all cells on this row */
        for (unsigned short j = 0; j < grid->size; j++)
          if (row_was_cleared[j])
            grid->cells[y * grid->size + j]->value =
                set_bit(grid->cells[y * grid->size + j]->value, bit_to_set);

        /* Readd possibility for all cells on this column */
        for (unsigned short j = 0; j < grid->size; j++)
          if (col_was_cleared[j])
            grid->cells[j * grid->size + x]->value =
                set_bit(grid->cells[j * grid->size + x]->value, bit_to_set);

        /* Update possibilities */
        cell_value = clear_bit(cell_value, bit_to_set);
        nb_values--;
      }
    }
  }

  /* If no values are possible, reset cell and return 0 */
  grid->cells[y * grid->size + x]->value = cell_value_orig;

  return 0;
}

/* Converts the value of every cell in the grid in such a way that the position
 * of the only bit set within the grid becomes its value. */
static void convert_bits_to_values(grid_t* grid) {
  for (unsigned int y = 0; y < grid->size; y++)
    for (unsigned int x = 0; x < grid->size; x++)
      grid->cells[y * grid->size + x]->value =
          find_singleton_position(grid->cells[y * grid->size + x]->value);
}

/* Generates and returns a new grid. */
static grid_t* generate_grid(size_t size) {
  if (size > MAX_GRID_SIZE) {
    printf("The size of the generated grid should be at most %d.\n",
           MAX_GRID_SIZE);
    return NULL;
  }

  grid_t* grid = initialize_grid(size);

  /* Set all cells to default value */
  uint64_t default_bits = 0;
  for (unsigned int i = 0; i < size; i++)
    default_bits = set_bit(default_bits, i + 1);

  for (unsigned int y = 0; y < size; y++)
    for (unsigned int x = 0; x < size; x++)
      grid->cells[y * grid->size + x]->value = default_bits;

  /* Randomly fill all cells */
  randomize_cell_value(grid, 0, 0);

  /* Convert bits to appropriate values */
  convert_bits_to_values(grid);

  /* Make rooms randomly with the cells we have */
  return random_rooms(grid);
}

/* Generates and returns a new grid. The values of the cells are the value of
 * the previous cell incremented by 1 with the value of the initial cell of each
 * line set to that line's number. The cells' values loop back to 1 once they
 * reach the grid size. This allows for quickly generating of a set size in a
 * predictable manner. Rooms are constructed randomly. */
static grid_t* generate_linear_grid(size_t size) {
  if (size > MAX_GRID_SIZE) {
    printf("The size of the generated grid should be at most %d.\n",
           MAX_GRID_SIZE);
    return NULL;
  }

  grid_t* grid = initialize_grid(size);

  /* Set cell value */
  for (unsigned int y = 0; y < size; y++)
    for (unsigned int x = 0; x < size; x++)
      grid->cells[y * grid->size + x]->value = (y + x) % grid->size + 1;

  /* Make rooms randomly with the cells we have */
  return random_rooms(grid);
}

/* Save the grid given as an argument to the file specified by the filename also
 * given. The grid is saved in the format that is used by this program to read
 * grids. */
static void save_generated_grid(grid_t* grid, char* filename) {
  FILE* output_file = fopen(filename, "w");

  if (output_file != NULL) {
    /* First line */
    fprintf(output_file, "%lux%lu", grid->size, grid->size);

    /* For each line/room */
    for (unsigned int y = 0; y < grid->size; y++) {
      for (unsigned int x = 0; x < grid->size; x++) {
        if (grid->cells[y * grid->size + x]->value != MAX_GRID_SIZE+1) {
          cell_t* current_cell = grid->cells[y * grid->size + x];

          /* room product */
          fprintf(output_file, "\n%llu", current_cell->room_product);

          /* room direction */
          if (current_cell->room_length == 1)
            fprintf(output_file, "r");

          else if (current_cell->next == grid->cells[y * grid->size + x + 1])
            fprintf(output_file, "r");

          else
            fprintf(output_file, "b");

          /* room length */
          fprintf(output_file, "%u", current_cell->room_length);

          /* Mark cells of room to MAX_GRID_SIZE+1 */
          while (current_cell != NULL) {
            current_cell->value = MAX_GRID_SIZE+1;
            current_cell = current_cell->next;
          }
        }
      }
    }

  }

  /* Error checking */
  else
    printf("Error opening output file.\n");

  if (fclose(output_file) != 0)
    printf("Error closing output file.\n");
}

/* Function that displays the program's help. */
static void process_help() {
  printf("Usage : inshiNoHeya [FILE] [OPTIONS].\n\n");
  printf("Solve or generate Inshi no Heya puzzles.\n\n");
  
  printf("   -o [FILE],      write the solved grid to an output file\n");
  printf("   -g [SIZE],      generate a grid of the given size\n");
  printf("   -i [FILE],      write the grid to a file in the input format ");
  printf("used by this program\n");
  printf("   -s,             the generated grid will have a unique solution\n");
  printf("   -h,             display this help\n");
  printf("   -v,             enable the verbose output\n");
  printf("   -l,             the generated grid's cells will have values that");
  printf(" are the increment of the previous cell on its row and its column,");
  printf(" this is useful for debugging on grids for which you already");
  printf(" know the solution\n");
}

/* Function that calls all necessary sub functions needed to solve a grid. */
static void process_solve(char* input_file,
                          int flag_verbose,
                          char* output_path) {
  /* Read the input file */
  grid_t* grid = read_file(input_file);

  /* Prints the starting grid if verbose is on */
  if (flag_verbose)
    print_grid(grid, output_path);

  /* Attempts to solve the grid */
  if (grid != NULL && solve_grid(grid, flag_verbose) == 1 &&
      check_grid(grid) == 1) {
    /* Print the solved grid */
    if (flag_verbose)
      print_grid(grid, NULL);

    else
      print_grid(grid, output_path);

    printf("The grid is valid.\n");

    /* Shows the number of cells solved by heuristics alone */
    if (flag_verbose)
      printf("Heuristics made : %d\n", grid->heuristics);
  }

  else if (grid != NULL)
    printf("The grid is invalid.\n");

  /* Clean up memory */
  free_grid(grid);
}

/* Function that calls all necessary sub functions needed to generate a grid. */
static void process_generate(size_t generation_size,
                             int flag_strict,
                             char* output_path,
                             int flag_input,
                             char* input_path,
                             int flag_linear,
                             int flag_verbose) {
  srand(time(NULL));

  grid_t* grid = NULL;

  /* Generates a strict grid */
  if (flag_strict) {
    int solutions_counter = 0;
    do {
      if (flag_verbose)
        printf("Generating a new %lux%lu grid.\n", generation_size, generation_size);
      
      free_grid(grid);
      
      if (flag_linear)
        grid = generate_linear_grid(generation_size);
        
      else
        grid = generate_grid(generation_size);
      
      solutions_counter = solve_grid_strict(grid);
      
      if (flag_verbose && solutions_counter == 2)
        printf("The grid has more than one solution.\n\n");
    } while (solutions_counter != 1);
  }

  /* Generate a grid */
  else {
    if (flag_verbose)
      printf("Generating a new %lux%lu grid.\n", generation_size, generation_size);
      
    if (flag_linear)
      grid = generate_linear_grid(generation_size);
      
    else
      grid = generate_grid(generation_size);
  }
  
  if (flag_verbose)
    printf("Printing the grid.\n");

  /* Output generated grid to a file as an input format */
  if (flag_input)
    save_generated_grid(grid, input_path);

  /* Print the solved grid */
  else if (!flag_strict)
    print_grid(grid, output_path);

  /* Prints the solved strict grid after resolving it */
  else {
    solve_grid(grid, 0);

    print_grid(grid, output_path);
  }

  /* Clean up memory */
  free_grid(grid);
  
  if (flag_verbose)
    printf("Finished generating the grid.\n");
}

/* Main function.*/
int main(int argc, char** argv) {
  int option;
  
  int flag_generate = 0;
  int flag_help = 0;
  int flag_verbose = 0;
  int flag_strict = 0;
  int flag_linear = 0;
  int flag_input = 0;
  
  char* file_to_solve = argv[1];
  char* output_path = NULL;
  char* input_path = NULL;
  size_t generation_size = 0;

  while ((option = getopt(argc, argv, "o:g:hvsi:l")) != -1)
    switch (option) {
      case 'o':
        output_path = optarg;
        break;

      case 'g':
        flag_generate = 1;
        generation_size = atol(optarg);
        break;

      case 'h':
        flag_help = 1;
        break;

      case 'v':
        flag_verbose = 1;
        break;

      case 's':
        flag_strict = 1;
        break;

      case 'i':
        flag_input = 1;
        input_path = optarg;
        break;

      case 'l':
        flag_linear = 1;
        break;

      case '?':
        fprintf(stderr, "Unknown option '-%c'. Try -h for information.\n", option);
        return 1;
    }

  if (argc < 2) {
    fprintf(stderr, "Usage: \"%s -h\" for help\n", argv[0]);
    exit(EXIT_FAILURE);
  }

  if (flag_help)
    process_help();

  else if (flag_generate)
    process_generate(generation_size, flag_strict, output_path, flag_input,
                     input_path, flag_linear, flag_verbose);

  else
    process_solve(file_to_solve, flag_verbose, output_path);

  return 0;
}
