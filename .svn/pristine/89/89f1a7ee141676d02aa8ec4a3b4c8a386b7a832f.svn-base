
#include "hashiwokakero.h"

void initialize(Grid* grid) {
  for (int i = 0; i < nb_island; i++) {
    grid->islands[i].up_neighbor = NULL;
    grid->islands[i].down_neighbor = NULL;
    grid->islands[i].left_neighbor = NULL;
    grid->islands[i].right_neighbor = NULL;

    grid->islands[i].linked_up_island = NULL;
    grid->islands[i].linked_down_island = NULL;
    grid->islands[i].linked_left_island = NULL;
    grid->islands[i].linked_right_island = NULL;

    grid->islands[i].nb_bridge_up = 0;
    grid->islands[i].nb_bridge_down = 0;
    grid->islands[i].nb_bridge_left = 0;
    grid->islands[i].nb_bridge_right = 0;

    grid->islands[i].finished = 0;
  }
}

int distance(int a, int b) {
  if (a < b)
    return b - a;
  return a - b;
}

int is_game_over(Grid* grid) {
  int i = 0;
  int cpt_bridges = 0;
  int cpt_values = 0;
  for (i = 0; i < nb_island; i++) {
    cpt_values += grid->islands[i].value;
    cpt_bridges +=
        grid->islands[i].nb_bridge_down + grid->islands[i].nb_bridge_up +
        grid->islands[i].nb_bridge_left + grid->islands[i].nb_bridge_right;
  }
  if (cpt_values == cpt_bridges)
    return 1;
  return 0;
}

int concatenate(int x, int y) {
  int pow = 10;
  while (y >= pow)
    pow *= 10;
  return x * pow + y;
}

void lock(Island* islands, Island* islandt, int dir, int bridges[]) {
  int xs = islands->x;
  int ys = islands->y;
  int xt = islandt->x;
  int yt = islandt->y;
  if (dir == 0) {
    for (ys -= 1; ys > yt; ys--) {
      bridges[pos] = concatenate(xs, ys);
      pos++;
    }
  }
  if (dir == 1) {
    for (ys += 1; ys < yt; ys++) {
      bridges[pos] = concatenate(xs, ys);
      pos++;
    }
  }
  if (dir == 2) {
    for (xs -= 1; xs > xt; xs--) {
      bridges[pos] = concatenate(xs, ys);
      pos++;
    }
  }
  if (dir == 3) {
    for (xs += 1; xs < xt; xs++) {
      bridges[pos] = concatenate(xs, ys);
      pos++;
    }
  }
}

int is_locked(Island* islands, Island* islandt, int dir, int bridges[]) {
  int i = 0;
  int xs = islands->x;
  int ys = islands->y;
  int xt = islandt->x;
  int yt = islandt->y;
  if (dir == 0) {
    for (ys -= 1; ys > yt; ys--) {
      for (i = 0; i <= pos; i++) {
        if (bridges[i] == concatenate(xs, ys)) {
          if (islands->linked_up_island != NULL) {
            break;
          }
          islands->up_neighbor = NULL;
          islandt->down_neighbor = NULL;
          return 1;
        }
      }
    }
  }
  if (dir == 1) {
    for (ys += 1; ys < yt; ys++) {
      for (i = 0; i <= pos; i++) {
        if (bridges[i] == concatenate(xs, ys)) {
          if (islands->linked_down_island != NULL) {
            break;
          }
          islands->down_neighbor = NULL;
          islandt->up_neighbor = NULL;
          return 1;
        }
      }
    }
  }
  if (dir == 2) {
    for (xs -= 1; xs > xt; xs--) {
      for (i = 0; i <= pos; i++) {
        if (bridges[i] == concatenate(xs, ys)) {
          if (islands->linked_left_island != NULL) {
            break;
          }
          islands->left_neighbor = NULL;
          islandt->right_neighbor = NULL;
          return 1;
        }
      }
    }
  }
  if (dir == 3) {
    for (xs += 1; xs < xt; xs++) {
      for (i = 0; i <= pos; i++) {
        if (bridges[i] == concatenate(xs, ys)) {
          if (islands->linked_right_island != NULL) {
            break;
          }
          islands->right_neighbor = NULL;
          islandt->left_neighbor = NULL;
          return 1;
        }
      }
    }
  }
  return 0;
}

int get_nb_island(FILE* _file) {
  int nb_island = 0;
  if (_file == NULL) /* Check if the file exists. */
    printf("Error reading file.\n");
  else {
    char char_read;
    char_read = fgetc(_file);
    while (char_read != EOF) {
      if ((char_read - int_to_char < 9) && (char_read - int_to_char > 0)) {
        nb_island++;
      }
      char_read = fgetc(_file);
    }
  }
  return nb_island;
}

int get_nb_neighbor(Island island) {
  int cpt = 0;
  if (island.up_neighbor != NULL)
    cpt++;
  if (island.down_neighbor != NULL)
    cpt++;
  if (island.left_neighbor != NULL)
    cpt++;
  if (island.right_neighbor != NULL)
    cpt++;
  return cpt;
}

int get_nb_neighbor_finished(Island island) {
  int cpt = 0;
  if ((island.up_neighbor != NULL) && (island.up_neighbor->finished == 1))
    cpt++;
  if ((island.down_neighbor != NULL) && (island.down_neighbor->finished == 1))
    cpt++;
  if ((island.left_neighbor != NULL) && (island.left_neighbor->finished == 1))
    cpt++;
  if ((island.right_neighbor != NULL) && (island.right_neighbor->finished == 1))
    cpt++;
  return cpt;
}

int get_nb_bridge(Island island) {
  int cpt = 0;
  if (island.nb_bridge_up > 0)
    cpt += island.nb_bridge_up;
  if (island.nb_bridge_down > 0)
    cpt += island.nb_bridge_down;
  if (island.nb_bridge_left > 0)
    cpt += island.nb_bridge_left;
  if (island.nb_bridge_right > 0)
    cpt += island.nb_bridge_right;
  return cpt;
}

void fill_grid(FILE* _file, Grid* grid) {
  char char_read;
  int i = 0;
  int j = 0;
  int a = 0;
  char_read = fgetc(_file);
  while (char_read != EOF) {
    if (char_read == '_') { /* Replaces _ by 0 in grid. */
      j++;
    } else if (char_read == '\n') {
      i++;
      j = 0;
    } else if ((char_read - int_to_char < 9) && (char_read - int_to_char > 0)) {
      grid->islands[a].x = j;
      grid->islands[a].y = i;
      grid->islands[a].value = char_read - int_to_char;
      j++;
      a++;
    } else
      j++;
    char_read = fgetc(_file);
  }
}

void fill_grid_neighbor(Grid* grid) {
  int i, j;
  int position_neighbor = -1;
  for (i = 0; i < nb_island; i++) {
    if ((grid->islands[i].x != 0) && (grid->islands[i].left_neighbor == NULL)) {
      for (j = 0; j < nb_island && j != i; j++) {
        if ((grid->islands[j].y == grid->islands[i].y) &&
            (grid->islands[j].x < grid->islands[i].x)) {
          if (position_neighbor == -1)
            position_neighbor = j;
          else {
            if ((distance(grid->islands[position_neighbor].x,
                          grid->islands[i].x)) >
                (distance(grid->islands[j].x, grid->islands[i].x)))
              position_neighbor = j;
          }
        }
      }
      if (position_neighbor > -1) {
        grid->islands[i].left_neighbor = &(grid->islands[position_neighbor]);
        grid->islands[position_neighbor].right_neighbor = &(grid->islands[i]);
      }
      position_neighbor = -1;
    }
    if ((grid->islands[i].x != sizeGrid) &&
        (grid->islands[i].right_neighbor == NULL)) {
      for (j = 0; j < nb_island && j != i; j++) {
        if ((grid->islands[j].y == grid->islands[i].y) &&
            (grid->islands[j].x > grid->islands[i].x)) {
          if (position_neighbor == -1)
            position_neighbor = j;
          else {
            if ((distance(grid->islands[position_neighbor].x,
                          grid->islands[i].x)) >
                (distance(grid->islands[j].x, grid->islands[i].x)))
              position_neighbor = j;
          }
        }
      }
      if (position_neighbor > -1) {
        grid->islands[i].right_neighbor = &(grid->islands[position_neighbor]);
        grid->islands[position_neighbor].left_neighbor = &(grid->islands[i]);
      }
      position_neighbor = -1;
    }
    if ((grid->islands[i].y != 0) && (grid->islands[i].up_neighbor == NULL)) {
      for (j = 0; j < nb_island && j != i; j++) {
        if ((grid->islands[j].x == grid->islands[i].x) &&
            (grid->islands[j].y < grid->islands[i].y)) {
          if (position_neighbor == -1)
            position_neighbor = j;
          else {
            if ((distance(grid->islands[position_neighbor].y,
                          grid->islands[i].y)) >
                (distance(grid->islands[j].y, grid->islands[i].y)))
              position_neighbor = j;
          }
        }
      }
      if (position_neighbor > -1) {
        grid->islands[i].up_neighbor = &(grid->islands[position_neighbor]);
        grid->islands[position_neighbor].down_neighbor = &(grid->islands[i]);
      }
      position_neighbor = -1;
    }
    if ((grid->islands[i].y != sizeGrid) &&
        (grid->islands[i].down_neighbor == NULL)) {
      for (j = 0; j < nb_island && j != i; j++) {
        if ((grid->islands[j].x == grid->islands[i].x) &&
            (grid->islands[j].y > grid->islands[i].y)) {
          if (position_neighbor == -1)
            position_neighbor = j;
          else {
            if ((distance(grid->islands[position_neighbor].y,
                          grid->islands[i].y)) >
                (distance(grid->islands[j].y, grid->islands[i].y)))
              position_neighbor = j;
          }
        }
      }
      if (position_neighbor > -1) {
        grid->islands[i].down_neighbor = &(grid->islands[position_neighbor]);
        grid->islands[position_neighbor].up_neighbor = &(grid->islands[i]);
      }
      position_neighbor = -1;
    }
  }
}

void print_grid(Grid* grid) {
  for (int i = 0; i < nb_island; i++) {
    printf(
        "Island[%d], position %d %d: left bridges: %d, right bridges: %d, up "
        "bridges %d, down bridges: %d\n",
        i, grid->islands[i].x, grid->islands[i].y,
        grid->islands[i].nb_bridge_left, grid->islands[i].nb_bridge_right,
        grid->islands[i].nb_bridge_up, grid->islands[i].nb_bridge_down);
  }

  printf("Total number of islands : %d\nNumber of finished islands : %d\n",
         nb_island, get_nb_island_finished(grid));
  if (is_game_over(grid) == 1) {
    printf("Solved.\n");
  } else {
    printf("Unsolved.\n");
  }
}

void print_grid_in_file(int** grid) {
  FILE* outputFile = NULL;

  outputFile =
      fopen("../hashiOutput.txt", "w"); /* Creates a file to write in. */
  int i, j;
  for (i = 0; i < sizeGrid; i++) {
    if (i > 0)
      fputc('\n', outputFile);
    for (j = 0; j < sizeGrid; j++) {
      if (grid[i][j] + int_to_char == '0')
        fputc('_', outputFile);
      else
        fputc(grid[i][j] + int_to_char, outputFile);
    }
  }
  fclose(outputFile);
}

/* Solving algorithms */

int get_nb_island_finished(Grid* grid) {
  int cpt = 0;
  int i;
  for (i = 0; i < nb_island; i++) {
    if (grid->islands[i].finished == 1)
      cpt++;
  }
  return cpt;
}

void validate_island(Island* island) {
  if (get_nb_bridge(*island) == island->value)
    island->finished = 1;
}

void heuristic_n1(Island* island, int bridges[]) {
  if (get_nb_neighbor(*island) == 1 && island->finished == 0) {
    if (island->up_neighbor != NULL &&
        is_locked(island, island->up_neighbor, UP, bridges) == 0) {
      island->linked_up_island = island->up_neighbor;
      island->nb_bridge_up = island->value;
      island->linked_up_island->linked_down_island = island;
      island->linked_up_island->nb_bridge_down = island->value;
      lock(island, island->up_neighbor, UP, bridges);
      validate_island(island->linked_up_island);
    }
    if (island->left_neighbor != NULL &&
        is_locked(island, island->left_neighbor, LEFT, bridges) == 0) {
      island->linked_left_island = island->left_neighbor;
      island->nb_bridge_left = island->value;
      island->linked_left_island->linked_right_island = island;
      island->linked_left_island->nb_bridge_right = island->value;
      lock(island, island->left_neighbor, LEFT, bridges);
      validate_island(island->linked_left_island);
    }
    if (island->down_neighbor != NULL &&
        is_locked(island, island->down_neighbor, DOWN, bridges) == 0) {
      island->linked_down_island = island->down_neighbor;
      island->nb_bridge_down = island->value;
      island->linked_down_island->linked_up_island = island;
      island->linked_down_island->nb_bridge_up = island->value;
      lock(island, island->down_neighbor, DOWN, bridges);
      validate_island(island->linked_down_island);
    }
    if (island->right_neighbor != NULL &&
        is_locked(island, island->right_neighbor, RIGHT, bridges) == 0) {
      island->linked_right_island = island->right_neighbor;
      island->nb_bridge_right = island->value;
      island->linked_right_island->linked_left_island = island;
      island->linked_right_island->nb_bridge_left = island->value;
      lock(island, island->right_neighbor, RIGHT, bridges);
      validate_island(island->linked_right_island);
    }
    island->finished = 1;
  }
}

void heuristic_n2(Island* island, int bridges[]) {
  if (get_nb_neighbor(*island) == island->value / 2 && island->finished == 0) {
    if (island->up_neighbor != NULL &&
        is_locked(island, island->up_neighbor, UP, bridges) == 0) {
      island->linked_up_island = island->up_neighbor;
      island->nb_bridge_up = 2;
      island->linked_up_island->linked_down_island = island;
      island->linked_up_island->nb_bridge_down = 2;
      lock(island, island->up_neighbor, UP, bridges);
      validate_island(island->linked_up_island);
    }
    if (island->left_neighbor != NULL &&
        is_locked(island, island->left_neighbor, LEFT, bridges) == 0) {
      island->linked_left_island = island->left_neighbor;
      island->nb_bridge_left = 2;
      island->linked_left_island->linked_right_island = island;
      island->linked_left_island->nb_bridge_right = 2;
      lock(island, island->left_neighbor, LEFT, bridges);
      validate_island(island->linked_left_island);
    }
    if (island->down_neighbor != NULL &&
        is_locked(island, island->down_neighbor, DOWN, bridges) == 0) {
      island->linked_down_island = island->down_neighbor;
      island->nb_bridge_down = 2;
      island->linked_down_island->linked_up_island = island;
      island->linked_down_island->nb_bridge_up = 2;
      lock(island, island->down_neighbor, DOWN, bridges);
      validate_island(island->linked_down_island);
    }
    if (island->right_neighbor != NULL &&
        is_locked(island, island->right_neighbor, RIGHT, bridges) == 0) {
      island->linked_right_island = island->right_neighbor;
      island->nb_bridge_right = 2;
      island->linked_right_island->linked_left_island = island;
      island->linked_right_island->nb_bridge_left = 2;
      lock(island, island->right_neighbor, RIGHT, bridges);
      validate_island(island->linked_right_island);
    }
    island->finished = 1;
  }
}

void heuristic_n3(Island* island, int bridges[]) {
  if (island->up_neighbor != NULL)
    is_locked(island, island->up_neighbor, UP, bridges);
  if (island->down_neighbor != NULL)
    is_locked(island, island->down_neighbor, DOWN, bridges);
  if (island->left_neighbor != NULL)
    is_locked(island, island->left_neighbor, LEFT, bridges);
  if (island->right_neighbor != NULL)
    is_locked(island, island->right_neighbor, RIGHT, bridges);
  if (((island->value + 1) % 2 == 0) &&
      (get_nb_neighbor(*island) == (island->value + 1) / 2) &&
      (island->finished == 0)) {
    if ((island->up_neighbor != NULL) &&
        (is_locked(island, island->up_neighbor, UP, bridges) == 0) &&
        (island->nb_bridge_up < 1)) {
      island->linked_up_island = island->up_neighbor;
      island->nb_bridge_up = 1;
      island->linked_up_island->linked_down_island = island;
      island->linked_up_island->nb_bridge_down = 1;
      lock(island, island->up_neighbor, UP, bridges);
      validate_island(island->linked_up_island);
    }
    if ((island->left_neighbor != NULL) &&
        (is_locked(island, island->left_neighbor, LEFT, bridges) == 0) &&
        (island->nb_bridge_left < 1)) {
      island->linked_left_island = island->left_neighbor;
      island->nb_bridge_left = 1;
      island->linked_left_island->linked_right_island = island;
      island->linked_left_island->nb_bridge_right = 1;
      lock(island, island->left_neighbor, LEFT, bridges);
      validate_island(island->linked_left_island);
    }
    if ((island->down_neighbor != NULL) &&
        (is_locked(island, island->down_neighbor, DOWN, bridges) == 0) &&
        (island->nb_bridge_down < 1)) {
      island->linked_down_island = island->down_neighbor;
      island->nb_bridge_down = 1;
      island->linked_down_island->linked_up_island = island;
      island->linked_down_island->nb_bridge_up = 1;
      lock(island, island->down_neighbor, DOWN, bridges);
      validate_island(island->linked_down_island);
    }
    if ((island->right_neighbor != NULL) &&
        (is_locked(island, island->right_neighbor, RIGHT, bridges) == 0) &&
        (island->nb_bridge_right < 1)) {
      island->linked_right_island = island->right_neighbor;
      island->nb_bridge_right = 1;
      island->linked_right_island->linked_left_island = island;
      island->linked_right_island->nb_bridge_left = 1;
      lock(island, island->right_neighbor, RIGHT, bridges);
      validate_island(island->linked_right_island);
    }
    validate_island(island);
  }
}

void heuristic_nb6(Island* island, int bridges[]) {
  if ((island->value == 6) && (get_nb_neighbor(*island) == 3) &&
      (island->finished == 0)) {
    if (island->up_neighbor != NULL &&
        is_locked(island, island->up_neighbor, UP, bridges) == 0) {
      island->linked_up_island = island->up_neighbor;
      island->nb_bridge_up = 1;
      island->linked_up_island->linked_down_island = island;
      island->linked_up_island->nb_bridge_down = 1;
      lock(island, island->up_neighbor, UP, bridges);
      validate_island(island->linked_up_island);
    }
    if (island->left_neighbor != NULL &&
        is_locked(island, island->left_neighbor, LEFT, bridges) == 0) {
      island->linked_left_island = island->left_neighbor;
      island->nb_bridge_left = 1;
      island->linked_left_island->linked_right_island = island;
      island->linked_left_island->nb_bridge_right = 1;
      lock(island, island->left_neighbor, LEFT, bridges);
      validate_island(island->linked_left_island);
    }
    if (island->down_neighbor != NULL &&
        is_locked(island, island->down_neighbor, DOWN, bridges) == 0) {
      island->linked_down_island = island->down_neighbor;
      island->nb_bridge_down = 1;
      island->linked_down_island->linked_up_island = island;
      island->linked_down_island->nb_bridge_up = 1;
      lock(island, island->down_neighbor, DOWN, bridges);
      validate_island(island->linked_down_island);
    }
    if (island->right_neighbor != NULL &&
        is_locked(island, island->right_neighbor, RIGHT, bridges) == 0) {
      island->linked_right_island = island->right_neighbor;
      island->nb_bridge_right = 1;
      island->linked_right_island->linked_left_island = island;
      island->linked_right_island->nb_bridge_left = 1;
      lock(island, island->right_neighbor, RIGHT, bridges);
      validate_island(island->linked_right_island);
    }
    validate_island(island);
  }
}

void heuristic_neighbor_finished(Island* island, int bridges[]) {
  if (island->up_neighbor != NULL)
    is_locked(island, island->up_neighbor, UP, bridges);
  if (island->down_neighbor != NULL)
    is_locked(island, island->down_neighbor, DOWN, bridges);
  if (island->left_neighbor != NULL)
    is_locked(island, island->left_neighbor, LEFT, bridges);
  if (island->right_neighbor != NULL)
    is_locked(island, island->right_neighbor, RIGHT, bridges);

  if ((get_nb_neighbor(*island) - get_nb_neighbor_finished(*island)) == 1 &&
      island->finished == 0) {
    if ((island->up_neighbor != NULL) &&
        (is_locked(island, island->up_neighbor, UP, bridges) == 0) &&
        (island->up_neighbor->finished == 0)) {
      island->linked_up_island = island->up_neighbor;
      island->nb_bridge_up += island->value - get_nb_bridge(*island);
      island->linked_up_island->linked_down_island = island;
      island->linked_up_island->nb_bridge_down = island->nb_bridge_up;
      lock(island, island->up_neighbor, UP, bridges);
      validate_island(island->linked_up_island);
    }
    if ((island->left_neighbor != NULL) &&
        (is_locked(island, island->left_neighbor, LEFT, bridges) == 0) &&
        (island->left_neighbor->finished == 0)) {
      island->linked_left_island = island->left_neighbor;
      island->nb_bridge_left += island->value - get_nb_bridge(*island);
      island->linked_left_island->linked_right_island = island;
      island->linked_left_island->nb_bridge_right = island->nb_bridge_left;
      lock(island, island->left_neighbor, LEFT, bridges);
      validate_island(island->linked_left_island);
    }
    if ((island->down_neighbor != NULL) &&
        (is_locked(island, island->down_neighbor, DOWN, bridges) == 0) &&
        (island->down_neighbor->finished == 0)) {
      island->linked_down_island = island->down_neighbor;
      island->nb_bridge_down += island->value - get_nb_bridge(*island);
      island->linked_down_island->linked_up_island = island;
      island->linked_down_island->nb_bridge_up = island->nb_bridge_down;
      lock(island, island->down_neighbor, DOWN, bridges);
      validate_island(island->linked_down_island);
    }
    if ((island->right_neighbor != NULL) &&
        (is_locked(island, island->right_neighbor, RIGHT, bridges) == 0) &&
        (island->right_neighbor->finished == 0)) {
      island->linked_right_island = island->right_neighbor;
      island->nb_bridge_right += island->value - get_nb_bridge(*island);
      island->linked_right_island->linked_left_island = island;
      island->linked_right_island->nb_bridge_left = island->nb_bridge_right;
      lock(island, island->right_neighbor, RIGHT, bridges);
      validate_island(island->linked_right_island);
    }
    island->finished = 1;
  }
}

void heuristic_k(Island* island) {
  int tmp_max;
  int max_bridge = 0;
  int max_bridge_up = 0;
  int max_bridge_left = 0;
  int max_bridge_down = 0;
  int max_bridge_right = 0;

  if (island->finished == 0) {
    if (island->up_neighbor != NULL && island->up_neighbor->finished == 0) {
      tmp_max =
          island->up_neighbor->value - get_nb_bridge(*(island->up_neighbor));
      if (tmp_max > 1)
        max_bridge_up = 2;
      else if (tmp_max > 0)
        max_bridge_up = 1;
      max_bridge += max_bridge_up;
    }
    if (island->left_neighbor != NULL && island->left_neighbor->finished == 0) {
      tmp_max = island->left_neighbor->value -
                get_nb_bridge(*(island->left_neighbor));
      if (tmp_max > 1)
        max_bridge_left = 2;
      else if (tmp_max > 0)
        max_bridge_left = 1;
      max_bridge += max_bridge_left;
    }
    if (island->down_neighbor != NULL && island->down_neighbor->finished == 0) {
      tmp_max = island->down_neighbor->value -
                get_nb_bridge(*(island->down_neighbor));
      if (tmp_max > 1)
        max_bridge_down = 2;
      else if (tmp_max > 0)
        max_bridge_down = 1;
      max_bridge += max_bridge_down;
    }
    if (island->right_neighbor != NULL &&
        island->right_neighbor->finished == 0) {
      tmp_max = island->right_neighbor->value -
                get_nb_bridge(*(island->right_neighbor));
      if (tmp_max > 1)
        max_bridge_right = 2;
      else if (tmp_max > 0)
        max_bridge_right = 1;
      max_bridge += max_bridge_right;
    }
    printf("max bridge %d\n", max_bridge);
    if (island->value == max_bridge) {
      if (max_bridge_up > 0) {
        island->linked_up_island = island->up_neighbor;
        island->nb_bridge_up = max_bridge_up;
        island->linked_up_island->linked_down_island = island;
        island->linked_up_island->nb_bridge_down = max_bridge_up;
        validate_island(island->linked_up_island);
      }
      if (max_bridge_left > 0) {
        island->linked_left_island = island->left_neighbor;
        island->nb_bridge_left = max_bridge_left;
        island->linked_left_island->linked_right_island = island;
        island->linked_left_island->nb_bridge_right = max_bridge_left;
        validate_island(island->linked_left_island);
      }
      if (max_bridge_down > 0) {
        island->linked_down_island = island->down_neighbor;
        island->nb_bridge_down = max_bridge_down;
        island->linked_down_island->linked_up_island = island;
        island->linked_down_island->nb_bridge_up = max_bridge_down;
        validate_island(island->linked_down_island);
      }
      if (max_bridge_right > 0) {
        island->linked_right_island = island->right_neighbor;
        island->nb_bridge_right = max_bridge_right;
        island->linked_right_island->linked_left_island = island;
        island->linked_right_island->nb_bridge_left = max_bridge_right;
        validate_island(island->linked_right_island);
      }
      island->finished = 1;
    }
  }
}

void simple_solver(Grid* grid, int bridges[]) {
  int i;
  // while (is_game_over(grid)!=1){
  for (i = 0; i < nb_island; i++) {
    heuristic_n1(&(grid->islands[i]), bridges);
    heuristic_n2(&(grid->islands[i]), bridges);
    heuristic_nb6(&(grid->islands[i]), bridges);
    heuristic_n3(&(grid->islands[i]), bridges);
  }
  for (int j = 0; j < 10; j++) {
    for (i = 0; i < nb_island; i++) {
      heuristic_neighbor_finished(&(grid->islands[i]), bridges);
    }
  }

  //}
}

/* Main */

int main(int argc, char** argv) {
  int i;
  int bridges[1024];

  /* Opens the file and check if it succedded. */
  FILE* inputFile;
  inputFile = fopen(argv[1], "r");
  if (inputFile == NULL) { /* Check if the file exists. */
    fprintf(stderr, "Error reading file.\n");
    exit(EXIT_FAILURE);
  }
  nb_island = get_nb_island(inputFile);
  rewind(inputFile);

  Grid* grid = malloc(sizeof(Grid));
  if (grid == NULL) {
    fprintf(stderr, "Allocation error.");
    exit(EXIT_FAILURE);
  }
  grid->islands = malloc(sizeof(Island*) * sizeof(Island) * nb_island);
  if (grid->islands == NULL) {
    fprintf(stderr, "Allocation error.");
    exit(EXIT_FAILURE);
  }

  initialize(grid);
  fill_grid(inputFile, grid);
  fill_grid_neighbor(grid);
  fclose(inputFile);

  simple_solver(grid, bridges);

  print_grid(grid);
  free(grid);
  free(grid->islands);
  return (0);
}
